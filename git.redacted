Mad Man Muntz Version of how to use git for standalone repository.

once per user:

    git config --global user.name 'John Doe'
    git config --global user.email 'john.doe@example.com'
    git config --global core.autocrlf input
    git config --global core.safecrlf true
    # I am confused about what value autocrlf should have.
    # Every time I read the documentation about it, I become more confused.

    # For text files that must have CRLF line endings,
    # (on an OS that does not use CRLF line endings)
    # add a line in .gitattributes like:
    # *.csv text eol=crlf

once per repository:

    # Repository lives in a directory (foo in example below).
    # Execute all git comamnds in that directory or subdirectories thereof.
    mkdir foo
    cd foo
    git init

    # following is standard practice for me. most people do not do it
    git ci --allow-empty -m 'Start with empty commit.' ;# Eases later rebasing.

once per version (aka "commit" in git-speak):

    if not first version:
        get checkout master
    vi somefiles
    git add somefiles
    # git ignores files that have never been added
    git commit -m 'short explanation of this version'
    git tag v1.n

list versions:

    git log
    git log -1
    git log --pretty=oneline
    git log --all
    git log --all --pretty-format
    git log --all --pretty-format="%h %cd %ad %an %ac"
    git log --pretty=oneline
    git log --pretty=oneline --max-count=2
    git log --pretty=oneline -2 ;# same as --max-count=2
    git log --pretty=oneline --since='5 minutes ago'
    git log --pretty=oneline --until='5 minutes ago'
    git log --pretty=oneline --author='James Prior'
    git log --all --pretty=format:"%h %cd %s (%an)" --since='7 days ago'
    git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short

list tags and branches

    git tag ;# list tags
    git branch
    git branch -v ;# show hash and commit comment.
    git branch -a ;# show remote branches also
    git branch -a -v ;# both

get a version of code from repository:

    git checkout master ;# branch name
    git checkout v1.n ;# tag name
    git checkout 3456514321 ;# hash from output of git log
    git checkout origin/master ;# remote branch name

    git checkout -- . ;# maybe restore all files from repository

###############################################################################

Mad Man Muntz Version of how to use git for with remote repository.

once per user:

    same as for standalone repository above.

once per repository:

    git clone repourl
    cd reponame

once per version (aka "commit" in git-speak):

    (same as for standalone repo:)
        if not first version:
            get checkout master ;# or some other branch name
        vi *
        git add * ;# * is of files one wants to track in repository
        git commit -m 'short explanation of this version'
        git tag v1.n
    (for remote repo only)
        git push origin master

to get new stuff from remote repo:

    git fetch origin
    git fetch remotereponame

to use stuff from remote repo:

    git merge remotereponame/remoterepobranchname
    git merge origin/master

list versions, tags, and branches

    same as for standalone repo

get a version of code from repository:

    same as standalone repo, plus

        git checkout remotereponame/remotebranchname

list remote repositories (known tersely as remotes)

    git remote
    git remote -v

###############################################################################

# My .ssh/config allows me to say just github instead of github.com
# for some protocols:

    [doj@pan ~]$ cat .ssh/config
    ...
    Host github github.com
        Hostname github.com
        IdentityFile ~/.ssh/github-id_rsa
        User james-prior
    ...
    [doj@pan ~]$ 

###############################################################################

git clone

    git clone <repourl>

    In the current working directory, makes directory from project name.
    We will call that directory, the project directory.
    Puts repo in the project directory.
    The .git directory will be a subdirectory of the project directory.
    Does not cd (change directory) into the project directory.

    Creates a remote with URL.
    That informtion is stored in .git/config of repo directory.

After doing git clone, to do git stuff with that cloned repo,
one needs to be in the project directory, or some subdirectory thereof.
A common mistake I make after cloning a repo,
is to forget to cd into the project directory.
Then I am baffled why my git commands do not work.

git clone examples

    # These git clone examples are mostly about URLs.
    # These URLS are relevant for git remote commands.

    # With ssh setup right, these do not ask for password.
    # Also, with my ~/.ssh/config, I can use github instead of github.com.
    git clone git@github:james-prior/challenge-201604-words.git
    git clone git@github:james-prior/challenge-201604-words ;# works w/o .git
    git clone git@github.com:james-prior/challenge-201604-words ;# works too
    # general URL format for github:
    # git@github.com:accountname/projectname.git
    #
    # Note that the project name is appended with .git
    # because a repo on github is a bare repo.
    # I.e., there is no '/' between projectname and '.git'.
    #
    # Empirically, they seem to work without the .git suffix,
    # but I don't know if that is a good idea.

    # probably can not push later with these urls
    git clone git://github.com/pydata/pandas.git
    git clone git://github.com/james-prior/challenge-201604-words.git
    git clone git://github.com/james-prior/challenge-201604-words
    git clone git://github/james-prior/challenge-201604-words.git ;# bad

    # pushing later will ask for password
    git clone https://github.com/chalmerlowe/data_generator.git
    git clone https://github.com/chalmerlowe/data_generator ;# works w/o .git
    git clone https://github/chalmerlowe/data_generator.git ;# bad
    git clone https://github.com/pydata/pandas.git
    git clone https://doj@bitbucket.org/cohpy/challenge-201604-words.git
    # general format for github:
    # https://github.com/accountname/projectname.git
    #
    # Note that the project name is appended with .git
    # because a repo on github is a bare repo.
    # I.e., there is no '/' between projectname and '.git'.
    #
    # Empirically, they seem to work without the .git suffix,
    # but I don't know if that is a good idea.
    #
    # Can not use github instead of github.com,
    # probably because https does not consult my ~/.ssh/config.

    # These are good for accessing remote repo that is accessible only by ssh.
    # I.e., that does not have a web server or git server.
    #
    # With ssh setup right, these do not ask for password.
    git clone doj@relax:i/dojo/.git ;# path relative to home
    git clone doj@relax:/home/doj/i/dojo/.git ;# absolute path
    git clone ssh://doj@relax/home/doj/i/dojo/.git ;# must have absolute path
    git clone ssh://git@bitbucket.org/cohpy/challenge-201604-words.git
    # Note that (except for bitbucket)
    # the project name is appended with /.git
    # which is a directory of a normal (not bare) repo.

    # For accessing repo on local machine.
    # can use relative or absolute paths
    git clone ~/i/dojo/.git
    git clone /home/doj/i/dojo/.git
    # uses hard links by default. might not want that when paranoid
    # Note that the project name is appended with /.git
    # which is a directory of a normal (not bare) repo.

###############################################################################

git push remotename localbranchname:remotebranchname
git push remotename branchname
    # above is expanded to git push remotename branchname:branchname
git push remotename :remotebranchname ;# deletes remote branch remotebranchname
git push remotename --delete remotebranchname ;#new way to delete remote branch

    github will not let one delete the default branch of repo.
    To delete the default branch,
    log into github and choose a different branch to be the default.
    If there is only one branch on the remote repo,
    github will not allow you to change it.
    So locally create some other branch and push it up to github,
    then choose it as the default branch on github.

###############################################################################

fatter version

Starting with a command like the following:
    git clone git@github:james-prior/ansible-modules-core.git
    git clone git@github.com:james-prior/ansible-modules-core.git
avoids the need to edit the url value in .git/config.

                            git@github.com:james-prior/challenge-201604-words.git
[doj@pan git]$ git clone git@github:james-prior/challenge-201604-words.git

[doj@pan git]$ cd challenge-201604-words/
[doj@pan challenge-201604-words]$ git remote -v
origin  git@github:james-prior/challenge-201604-words.git (fetch)
origin  git@github:james-prior/challenge-201604-words.git (push)
[doj@pan challenge-201604-words]$ 

[doj@pan git]$ git clone https://github.com/james-prior/challenge-201604-words.git
[doj@pan git]$ cd challenge-201604-words/
[doj@pan challenge-201604-words]$ git remote -v
origin  https://github.com/james-prior/challenge-201604-words.git (fetch)
origin  https://github.com/james-prior/challenge-201604-words.git (push)
[doj@pan challenge-201604-words]$ 

ssh remotes:

    git remote add relax doj@relax:challenge-201604-words/.git
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
        [doj@pan challenge-201604-words]$ git remote -v
        relax  doj@relax:challenge-201604-words/.git (fetch)
        relax  doj@relax:challenge-201604-words/.git (push)
        origin  git@github:james-prior/challenge-201604-words.git (fetch)
        origin  git@github:james-prior/challenge-201604-words.git (push)
        [doj@pan challenge-201604-words]$ 

        Note that the ^'ed part is the relative path of the git directory,
        relative to the user's home.
        (typically ending with projectname/.git for non-bare repos)
        (typically ending with projectname.git for bare repos)

    git remote add relax ssh://doj@relax/home/doj/challenge-201604-words/.git
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        [doj@pan challenge-201604-words]$ git remote -v
        relax  ssh://doj@relax/home/doj/challenge-201604-words/.git (fetch)
        relax  ssh://doj@relax/home/doj/challenge-201604-words/.git (push)
        origin  git@github:james-prior/challenge-201604-words.git (fetch)
        origin  git@github:james-prior/challenge-201604-words.git (push)
        [doj@pan challenge-201604-words]$ git fetch

        Note that the ^'ed part is the absolute path of the git directory.
        (typically ending with /projectname/.git for non-bare repos)
        (typically ending with /projectname.git for bare repos)

redo commits:

    most recent:

        # --amend -m is slightly dangerous for me.
        # I often fetch a previous commit command from history and edit it.
        # When that command has --amend -m in it,
        # sometimes I neglect to notice and delete the --amend option
        # and accidentally add current changes to an old commit.
        git commit --amend -m 'new comment'

        # --amend without -m is safer for me.
        # Since it puts me in an editor,
        # it is obvious that I am doing an append.
        # It is easy to bail out of amended commit from editor
        # by deleting the whole comment.
        # Then I can do a new non-amended commit.
        git commit --amend ;# goes into editor

        # sets author to current author and timestamp to now
        git commit --amend --reset-author

    older commits:

        git rebase --interactive <parent_of_flawed_commit>

            If you want to edit old commits, use the parent of the oldest one.
            Change pick to reword in front of any commits you want to edit.
            http://stackoverflow.com/questions/179123/edit-an-incorrect-commit-messge-in-git

to forget remote branches from local repo that no longer exist on remote repo:

    git remote prune relax

to push repo to github that was not cloned from github

    git push -u origin master

using meld for external diff on ad-hoc basis

    gmd shows differences uses meld.

    gmd ;# shows diffs for all files with meld, one at a time
    gmd foo ;# shows diffs for file foo with meld, one at a time

    setup

        sudo apt-get install meld

        doj@pan:~$ cat ~/bin/gmd
        #!/bin/sh

        # Does git diff with external diff program,
        #     even if diff=whatever is not specified in .gitattributes
        #     even if [diff "whatever"] is not specified in ~/.gitconfig.

        GIT_EXTERNAL_DIFF=git-ext-diff-wrapper git diff "$@"
        doj@pan:~$ cat ~/bin/git-ext-diff-wrapper
        #!/bin/sh

        meld "$2" "$5"
        doj@pan:~$ 

###############################################################################

for repo in `git remote`; do echo "$repo:";git fetch "$repo";done

###############################################################################

git can not add a completely empty directory,
so a convention of putting an empty file named ".gitkeep" has been created.

todo:

    study
        https://schacon.github.io/git/git-rev-parse.html
        http://stevelosh.com/blog/2013/04/git-koans/
