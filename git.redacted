Mad Man Muntz Version of how to use git

once per user: 

    git config --global user.name 'John Doe'
    git config --global user.email 'john.doe@example.com'
    git config --global core.autocrlf input
    git config --global core.safecrlf false

once per repository:

    # Repository lives in a directory.
    # Execute all git comamnds in that directory or subdirectories thereof.
    mkdir foo
    cd foo
    git init

    git ci --allow-empty -m 'Start with empty commit.' ;# Eases later rebasing.

once per version (aka "commit" in git-speak): 

    if not first version:
        get checkout master
    vi *
    git add * ;# * is of files one wants to track in repository
    git commit -m 'short explanation of this version'
    git tag v1.n

list versions:

    git log
    git log --pretty-format
    git log --all
    git log --all --pretty-format
    git log --all --pretty-format="%h %cd %ad %an %ac"
    git log --pretty=oneline
    git log --pretty=oneline --max-count=2
    git log --pretty=oneline -2 ;# same as --max-count=2
    git log --pretty=oneline --since='5 minutes ago'
    git log --pretty=oneline --until='5 minutes ago'
    git log --pretty=oneline --author='James Prior'
    git log --all --pretty=format:"%h %cd %s (%an)" --since='7 days ago'
    git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
    git tag ;# list tags
    git branch
    git branch -v ;# show hash and commit comment.
    git branch -a ;# show remote branches also
    git branch -a -v ;# both

get a version of code from repository: 

    git checkout master ;# branch name
    git checkout v1.n ;# tag name
    git checkout 3456514321 ;# hash from output of git log
    git checkout origin/master ;# remote branch name

    git checkout -- . ;# maybe restore all files from repository

###############################################################################

# My .ssh/config allows me to say just github instead of github.com
# for some protocols:

    [doj@panera ~]$ cat .ssh/config
    ...
    Host github github.com
        Hostname github.com
        IdentityFile ~/.ssh/github-id_rsa
        User james-prior
    ...
    [doj@panera ~]$ 

###############################################################################

git clone examples

In the current working directory, makes directory from project name.
Puts repo in that subdirectory named after project.
The .git directory will be in a subdirectory of that project directory.

    # with ssh setup right, these do not ask for password
    git clone git@github:james-prior/challenge-201604-words.git
    git clone git@github:james-prior/challenge-201604-words ;# works w/o .git
    git clone git@github.com:james-prior/challenge-201604-words ;# works too

    # probably can not push later with these urls
    git clone git://github.com/pydata/pandas.git
    git clone git://github.com/james-prior/challenge-201604-words.git
    git clone git://github.com/james-prior/challenge-201604-words
    git clone git://github/james-prior/challenge-201604-words.git ;# bad

    # pushing later will ask for password
    git clone https://github.com/chalmerlowe/data_generator.git
    git clone https://github.com/chalmerlowe/data_generator ;# works w/o .git
    git clone https://github/chalmerlowe/data_generator.git ;# bad
    git clone https://github.com/pydata/pandas.git

    # with ssh setup right, these do not ask for password
    git clone doj@casual:i/dojo/.git ;# path relative to home
    git clone doj@casual:/home/doj/i/dojo/.git ;# absolute path
    git clone ssh://doj@casual/home/doj/i/dojo/.git ;# must have absolute path

    # can use relative or absolute paths
    # like rsync, but has origin for fetch/push
    git clone ~/i/dojo/.git
    git clone /home/doj/i/dojo/.git

###############################################################################

git push remotename localbranchname:remotebranchname
git push remotename branchname
    # above is expanded to git push remotename branchname:branchname
git push remotename :remotebranchname ;# deletes remote branch remotebranchname
git push remotename --delete remotebranchname ;#new way to delete remote branch

    github will not let one delete the default branch of repo.
    To delete the default branch,
    log into github and choose a different branch to be the default.
    If there is only one branch on the remote repo,
    github will not allow you to change it.
    So locally create some other branch and push it up to github,
    then choose it as the default branch on github.

###############################################################################

fatter version

#! deprecated: After one does git clone with whatever URL,
#! deprecated: edit the url in .git/config to make the remote repo happy.

Starting with a command like the following:
    git clone git@github:james-prior/ansible-modules-core.git
    git clone git@github.com:james-prior/ansible-modules-core.git
avoids the need to edit the url value in .git/config.

                            git@github.com:james-prior/challenge-201604-words.git
[doj@panera git]$ git clone git@github:james-prior/challenge-201604-words.git

[doj@panera git]$ cd challenge-201604-words/
[doj@panera challenge-201604-words]$ git remote -v
origin  git@github:james-prior/challenge-201604-words.git (fetch)
origin  git@github:james-prior/challenge-201604-words.git (push)
[doj@panera challenge-201604-words]$ 

[doj@panera git]$ git clone https://github.com/james-prior/challenge-201604-words.git
[doj@panera git]$ cd challenge-201604-words/
[doj@panera challenge-201604-words]$ git remote -v
origin  https://github.com/james-prior/challenge-201604-words.git (fetch)
origin  https://github.com/james-prior/challenge-201604-words.git (push)
[doj@panera challenge-201604-words]$ 

ssh remotes:

    git remote add casual doj@casual:challenge-201604-words/.git
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
        [doj@panera challenge-201604-words]$ git remote -v
        casual  doj@casual:challenge-201604-words/.git (fetch)
        casual  doj@casual:challenge-201604-words/.git (push)
        origin  git@github:james-prior/challenge-201604-words.git (fetch)
        origin  git@github:james-prior/challenge-201604-words.git (push)
        [doj@panera challenge-201604-words]$ 

        Note that the ^'ed part is the relative path of the git directory,
        relative to the user's home.
        (typically ending with projectname/.git for non-bare repos)
        (typically ending with projectname.git for bare repos)

    git remote add casual ssh://doj@casual/home/doj/challenge-201604-words/.git
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        [doj@panera challenge-201604-words]$ git remote -v
        casual  ssh://doj@casual/home/doj/challenge-201604-words/.git (fetch)
        casual  ssh://doj@casual/home/doj/challenge-201604-words/.git (push)
        origin  git@github:james-prior/challenge-201604-words.git (fetch)
        origin  git@github:james-prior/challenge-201604-words.git (push)
        [doj@panera challenge-201604-words]$ git fetch 

        Note that the ^'ed part is the absolute path of the git directory.
        (typically ending with /projectname/.git for non-bare repos)
        (typically ending with /projectname.git for bare repos)

redo commits:

    most recent:

        # --amend -m is slightly dangerous for me.
        # I often fetch a previous commit command from history and edit it.
        # When that command has --amend -m in it,
        # sometimes I neglect to notice and delete the --amend option
        # and accidentally add current changes to an old commit.
        git commit --amend -m 'new comment'

        # --amend without -m is safer for me.
        # Since it puts me in an editor,
        # it is obvious that I am doing an append.
        # It is easy to bail out of amended commit from editor
        # by deleting the whole comment.
        # Then I can do a new non-amended commit.
        git commit --amend ;# goes into editor

        # sets author to current author and timestamp to now
        git commit --amend --reset-author

    older commits:

        git rebase --interactive <parent_of_flawed_commit>

            If you want to edit old commits, use the parent of the oldest one.
            Change pick to reword in front of any commits you want to edit.
            http://stackoverflow.com/questions/179123/edit-an-incorrect-commit-messge-in-git

to forget remote branches from local repo that no longer exist on remote repo:

    git remote prune casual

to push repo to github that was not cloned from github

    git push -u origin master

using meld for external diff on ad-hoc basis

    gmd shows differences uses meld.

    gmd ;# shows diffs for all files with meld, one at a time
    gmd foo ;# shows diffs for file foo with meld, one at a time

    setup

        sudo apt-get install meld

        doj@4519_n_high:~$ cat bin/gmd
        #!/bin/sh

        # Does git diff with external diff program,
        #     even if diff=whatever is not specified in .gitattributes
        #     even if [diff "whatever"] is not specified in ~/.gitconfig.

        GIT_EXTERNAL_DIFF=git-ext-diff-wrapper git diff "$@"
        doj@4519_n_high:~$ cat bin/git-ext-diff-wrapper
        #!/bin/sh

        meld "$2" "$5"
        doj@4519_n_high:~$ 

###############################################################################

for repo in `git remote`; do echo "$repo:";git fetch "$repo";done

###############################################################################

git can not add a completely empty directory,
so a convention of putting an empty file named ".gitkeep" has been created.
