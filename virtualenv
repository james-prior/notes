todo:

    add commands to show different pip versions inside and outside of virtualenv

--------------------------------------------------------------------------------

Installation

    for Centos 6.6 64-bit: (2015-04-27)

        I prefer the first technique, because it gets newest version of virtualenv
        (with newest version of pip inside virtualenv).

        First technique uses pip to install virtualenv at system level.

            This installs the latest version of virtualenv by default,
            but could install any version of virtualenv.

            # Installing epel makes python-pip available
            [root@foo]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
            [root@foo]# yum install python-pip
            # got pip version 1.3.1
            # Then we use pip to install virtualenv as python package for whole system
            [root@foo]# pip install virtualenv
            # got version 12.1.1 (2015-04-07 vintage) (with pip version 6.1.1 inside virtualenv)
            # Note that there are two versions of pip:
            #     1.3.1 outside virtualenv
            #     6.1.1 inside virtualenv

        Other technique uses yum to install virtualenv at system level.

            # Installing epel makes python-pip available
            [root@foo]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
            [root@foo]# yum install python-virtualenv
            # got version 1.10.1 (2013-08-07 vintage) (with pip version 1.4.1 inside virtualenv)
            # Note that there is no pip at system level

    for Centos 7.2 64-bit: (2017-03-12)

        There are two techniques and tradeoffs between them. The choice is
        clear. Use the first technique, because it can get the newest version
        of virtualenv (with newest version of pip inside virtualenv).

        First technique uses pip to install virtualenv at system level.

            This installs the latest version of virtualenv by default, but
            could install any version of virtualenv. It also gets a
            corresponding version of pip for use only within the virtual
            environments. The undesirable thing about this technique is that it
            installs virtualenv at the sytem level, without using the system
            package manager. However this is simply necessary to get a current
            version of virtualenv (and pip within) that at least some python
            packages require.

            short version:

                [root@pan ~]# yum install epel-release
                [root@pan ~]# yum install python-pip
                [root@pan ~]# pip install virtualenv

                pip 8.1.2 outside virtualenv
                virtualenv 15.1.0
                    pip 9.0.1 inside virtualenv

            2017-03-12 on Centos 7.2:
            # Installing epel makes python-pip available
            [root@pan ~]# yum install epel-release
            [root@pan ~]# yum install python-pip
            ...
            Running transaction
              Installing : python2-pip-8.1.2-5.el7.noarch                               1/1 
              Verifying  : python2-pip-8.1.2-5.el7.noarch                               1/1 
            ...
            [root@pan ~]# pip --version
            pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)
            # Then use pip to install virtualenv as python package for whole system.
            [root@pan ~]# pip install virtualenv
            ...
            Successfully installed virtualenv-15.1.0
            You are using pip version 8.1.2, however version 9.0.1 is available.
            You should consider upgrading via the 'pip install --upgrade pip' command.
            [root@pan ~]# virtualenv --version
            15.1.0
            [root@pan ~]# 

            WARNING:

                Installing with the following sudo commands does not work.
                virtualenv will be unhappy.
                I expected the sudo commands to work,
                but the virtualenv they install crashes.
                Don't know why.

                sudo yum install python-pip
                sudo pip install virtualenv

            [doj@pan ~]$ mkdir foo
            [doj@pan ~]$ cd foo
            [doj@pan foo]$ virtualenv env
            New python executable in /home/doj/foo/env/bin/python2
            Also creating executable in /home/doj/foo/env/bin/python
            Installing setuptools, pip, wheel...done.
            [doj@pan foo]$ source env/bin/activate
            (env) [doj@pan foo]$ virtualenv --version
            15.1.0
            (env) [doj@pan foo]$ pip --version
            pip 9.0.1 from /home/doj/foo/env/lib/python2.7/site-packages (python 2.7)
            (env) [doj@pan foo]$ python
            Python 2.7.5 (default, Nov  6 2016, 00:28:07) 
            [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
            Type "help", "copyright", "credits" or "license" for more information.
            >>> 
            (env) [doj@pan foo]$ pip install pip_check_reqs pip-tools
            Collecting pip_check_reqs
              Using cached pip_check_reqs-2.0.1-py2.py3-none-any.whl
            Collecting pip-tools
              Using cached pip_tools-1.8.0-py2.py3-none-any.whl
            Requirement already satisfied: packaging in ./env/lib/python2.7/site-packages (f
            rom pip_check_reqs)
            Requirement already satisfied: pip>=6.0 in ./env/lib/python2.7/site-packages (fr
            om pip_check_reqs)
            Collecting first (from pip-tools)
              Using cached first-2.0.1-py2.py3-none-any.whl
            Collecting click>=6 (from pip-tools)
              Using cached click-6.7-py2.py3-none-any.whl
            Requirement already satisfied: six in ./env/lib/python2.7/site-packages (from pi
            p-tools)
            Requirement already satisfied: pyparsing in ./env/lib/python2.7/site-packages (f
            rom packaging->pip_check_reqs)
            Installing collected packages: pip-check-reqs, first, click, pip-tools
            Successfully installed click-6.7 first-2.0.1 pip-check-reqs-2.0.1 pip-tools-1.8.
            0
            (env) [doj@pan foo]$ echo jsonschema >requirements.in
            (env) [doj@pan foo]$ pip-compile --output-file requirements.txt requirements.in
            #
            # This file is autogenerated by pip-compile
            # To update, run:
            #
            #    pip-compile --output-file requirements.txt requirements.in
            #
            functools32==3.2.3.post2  # via jsonschema
            jsonschema==2.6.0
            (env) [doj@pan foo]$ deactivate 
            [doj@pan foo]$ virtualenv --version
            15.1.0
            [doj@pan foo]$ 
            # Note that there are two versions of pip:
            #     8.1.2 outside virtualenv
            #     9.0.1 inside virtualenv

        Second technique uses yum to install virtualenv at system level.

            This is not recommended.

            The nice thing about this technique is that things installed at the
            system level are installed only with the system package manager
            (rpm/yum). Unfortunately, the version of virtualenv installed (and
            the version of pip that virtualenv makes available within a virtual
            environment) are so old, that it breaks many modern packages. So
            using rpm/yum to install virtualenv (at system level) is not
            recommended.

            short version:

                [root@pan ~]# yum install epel-release
                [root@pan ~]# yum install python-virtualenv

            2017-03-12 on Centos 7.2:
            [root@pan ~]# yum install epel-release
            [root@pan ~]# yum install python-virtualenv
            Installed:
              python-virtualenv.noarch 0:1.10.1-3.el7
            [root@pan ~]# virtualenv --version
            1.10.1
            [root@pan ~]# pip --version
            -bash: /bin/pip: No such file or directory
            # It is ok that pip is not installed at system level.
            [root@pan ~]# python
            Python 2.7.5 (default, Nov  6 2016, 00:28:07) 
            [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
            Type "help", "copyright", "credits" or "license" for more information.
            >>> 
            [root@pan ~]# 

            [doj@pan ~]$ mkdir foo
            [doj@pan ~]$ cd foo
            [doj@pan foo]$ virtualenv env
            New python executable in env/bin/python
            ...
            [doj@pan foo]$ source env/bin/activate
            (env)[doj@pan foo]$ virtualenv --version
            1.10.1
            (env)[doj@pan foo]$ pip --version
            pip 1.4.1 from /home/doj/foo/env/lib/python2.7/site-packages (python 2.7)
            (env)[doj@pan foo]$ python
            Python 2.7.5 (default, Nov  6 2016, 00:28:07) 
            [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
            Type "help", "copyright", "credits" or "license" for more information.
            >>> 
            (env)[doj@pan foo]$ pip install pip_check_reqs pip-tools
            # seemed to install successfully, but it was not really successful
            (env)[doj@pan foo]$ echo jsonschema >requirements.txt 
            (env)[doj@pan foo]$ pip-compile --output-file requirements.txt requirements.in
            ValueError: ('Expected version spec in', u'functools32; python_version == "2.7"'
            , 'at', u'; python_version == "2.7"')
            (env)[doj@pan foo]$ deactivate 
            [doj@pan foo]$ virtualenv --version
            1.10.1
            [doj@pan foo]$ pip --version
            bash: pip: command not found...
            # Again, it is ok that pip is not installed at system level.
            [doj@pan foo]$ python
            Python 2.7.5 (default, Nov  6 2016, 00:28:07) 
            [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
            Type "help", "copyright", "credits" or "license" for more information.
            >>> 
            [doj@pan foo]$ 

    for Xubuntu 12.10

        sudo apt-get install python-virtualenv

--------------------------------------------------------------------------------

Create a virtualenv

    [peon@foo]$ mkdir fooproject
    [peon@foo]$ cd fooproject
    [peon@foo]$ virtualenv env

    # These are not necessary, but handy to know what one started with.
    [peon@foo]$ source env/bin/activatee
    [peon@foo]$ pip freeze >requirements.txt.original
    [peon@foo]$ deactivate

--------------------------------------------------------------------------------

Use a virtualenv

    [peon@foo]$ cd fooproject
    [peon@foo]$ source env/bin/activatee

    [peon@foo]$ pip install whateverpythonpackagename
    [peon@foo]$ pip install -r requirements.txt

--------------------------------------------------------------------------------

Stop using a virtualenv

    [peon@foo]$ deactivate

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

pyvenv/venv is preferred for Python 3

Raspbian 8 (20160226-jessie) on Pi 3

    sudo apt-get install python3-venv
    pyvenv env
    source env/bin/activate
    # within the environment, python3 is the default python!
    # pip does stuff for python3, not python2
    deactivate

--------------------------------------------------------------------------------

Ubuntu 14.04.4 LTS

    sudo apt-get install python3.4-venv
    python3 -m venv env3
    source env3/bin/activate
    # within the environment, python3 is the default python!
    # pip does stuff for python3, not python2
    deactivate
