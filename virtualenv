todo:

    add commands to show different pip versions inside and outside of virtualenv

--------------------------------------------------------------------------------

Installation

    for Centos 6.6 64-bit: (2015-04-27)

        I prefer the first technique, because it gets newest version of virtualenv
        (with newest version of pip inside virtualenv).

        First technique uses pip to install virtualenv at system level.

            This installs the latest version of virtualenv by default,
            but could install any version of virtualenv.

            # Installing epel makes python-pip available
            [root@foo]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
            [root@foo]# yum install python-pip
            # got pip version 1.3.1
            # Then we use pip to install virtualenv as python package for whole system
            [root@foo]# pip install virtualenv
            # got version 12.1.1 (2015-04-07 vintage) (with pip version 6.1.1 inside virtualenv)
            # Note that there are two versions of pip:
            #     1.3.1 outside virtualenv
            #     6.1.1 inside virtualenv

        Other technique uses yum to install virtualenv at system level.

            # Installing epel makes python-pip available
            [root@foo]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
            [root@foo]# yum install python-virtualenv
            # got version 1.10.1 (2013-08-07 vintage) (with pip version 1.4.1 inside virtualenv)
            # Note that there is no pip at system level

    for Centos 7 64-bit: (2015-05-12) (untested)

        I prefer the first technique, because it gets newest version of virtualenv
        (with newest version of pip inside virtualenv).

            2017-03-10 addendum:

                Amen! Use the first technique! Shun the second technique!

        First technique uses pip to install virtualenv at system level.

            This installs the latest version of virtualenv by default,
            but could install any version of virtualenv.

            # Installing epel makes python-pip available
            [root@foo]# rpm -ivh http://mirror.compevo.com/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
            # Key ID  4096R/352C64E5 2013-12-16
            # Fingerprint     91E9 7D7C 4A5E 96F1 7F3E 888F 6A2F AEA2 352C 64E5
            # uid     Fedora EPEL (7) <epel@fedoraproject.org>
            [root@foo]# yum install python-pip
            # got pip version 1.5.6 (pip -V)
            # Then we use pip to install virtualenv as python package for whole system
            [root@foo]# pip install virtualenv
            # got version 12.1.1 (2015-04-07 vintage) (with pip version 6.1.1 inside virtualenv)
            # Note that there are two versions of pip:
            #     1.5.6 outside virtualenv
            #     6.1.1 inside virtualenv

            2017-03-10 addendum:

                The above commands run as root still work fine.
                They get even newer version of pip and virtualenv.
                Installing them with the following sudo commands does not work.
                virtualenv will be unhappy.
                I expected the sudo commands to work,
                but the virtualenv they install crashes.
                Don't know why.

                sudo yum install python-pip
                sudo pip install virtualenv

        Other technique uses yum to install virtualenv at system level.

            # Installing epel makes python-pip available
            [root@foo]# rpm -ivh http://mirror.compevo.com/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
            # Key ID  4096R/352C64E5 2013-12-16
            # Fingerprint     91E9 7D7C 4A5E 96F1 7F3E 888F 6A2F AEA2 352C 64E5
            # uid     Fedora EPEL (7) <epel@fedoraproject.org>
            [root@foo]# yum install python-virtualenv
            # got version 1.10.1 (2013-08-07 vintage) (with pip version 1.4.1 inside virtualenv)
            # Note that there is no pip at system level

            2017-03-10 addendum:

                Do not do this.

                Version 1.10.1 of virtualenv (and/or version 1.4.1 of pip within it)
                are too old for use with pip-compile of pip-tools.

    for Xubuntu 12.10

        sudo apt-get install python-virtualenv

--------------------------------------------------------------------------------

Create a virtualenv

    [peon@foo]$ mkdir fooproject
    [peon@foo]$ cd fooproject
    [peon@foo]$ virtualenv env

    # These are not necessary, but handy to know what one started with.
    [peon@foo]$ source env/bin/activatee
    [peon@foo]$ pip freeze >requirements.txt.original
    [peon@foo]$ deactivate

--------------------------------------------------------------------------------

Use a virtualenv

    [peon@foo]$ cd fooproject
    [peon@foo]$ source env/bin/activatee

    [peon@foo]$ pip install whateverpythonpackagename
    [peon@foo]$ pip install -r requirements.txt

--------------------------------------------------------------------------------

Stop using a virtualenv

    [peon@foo]$ deactivate

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

pyvenv/venv is preferred for Python 3

Raspbian 8 (20160226-jessie) on Pi 3

    sudo apt-get install python3-venv
    pyvenv env
    source env/bin/activate
    # within the environment, python3 is the default python!
    # pip does stuff for python3, not python2
    deactivate

--------------------------------------------------------------------------------

Ubuntu 14.04.4 LTS

    sudo apt-get install python3.4-venv
    python3 -m venv env3
    source env3/bin/activate
    # within the environment, python3 is the default python!
    # pip does stuff for python3, not python2
    deactivate
